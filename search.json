[{"path":"https://emanuelsoda.github.io/ScreenR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ScreenR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":null,"dir":"","previous_headings":"","what":"ScreenR ","title":"ScreenR ","text":"ScreenR easy effective package perform hits identification loss function High Throughput Biological Screening performed shRNAs library. ScreenR combines power software like edgeR simplicity Tidyverse metapackage. ScreenR executes pipeline able find candidate hits barcode counts data integrates wide range visualization step analysis","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"ScreenR ","text":"Get latest stable R release CRAN note need R 4.3 greater use ScreenR. install ScreenR Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"ScreenR\") devtools::install_github(\"EmanuelSoda/ScreenR\")"},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":"screenr-overall-workflow","dir":"","previous_headings":"","what":"ScreenR overall workflow","title":"ScreenR ","text":"Please note ScreenR made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"ScreenR ","text":"citation output using citation('ScreenR') R. Please run check updates cite ScreenR.","code":"print(citation('ScreenR')) #>  #> To cite package 'ScreenR' in publications use: #>  #>   Soda E, Ceccacci E (2022). _ScreenR: Package to Perform High #>   Throughput Biological Screening_. R package version 0.99.53, #>   <https://emanuelsoda.github.io/ScreenR/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {ScreenR: Package to Perform High Throughput Biological Screening}, #>     author = {Emanuel Michele Soda and Elena Ceccacci}, #>     year = {2022}, #>     note = {R package version 0.99.53}, #>     url = {https://emanuelsoda.github.io/ScreenR/}, #>   }"},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"ScreenR ","text":"Please note ScreenR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/README.knit.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"ScreenR ","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"importing-package","dir":"Articles","previous_headings":"","what":"Importing Package","title":"ScreenR Example Analysis","text":"","code":"knitr::opts_chunk$set(collapse = TRUE, comment = \"#>\") library(ggplot2) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(tidyr)"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ScreenR Example Analysis","text":"R package ScreenR developed perform analysis High-throughput RNA interference screening using pooled shRNA libraries next generation sequencing.. Nowadays several short hairpin RNA (shRNA) libraries commercial available, last years interest type analysis, often called barcode screening, greatly increased benefits time-consuming point view possibility carrying screening large number genes simultaneously. However, bioinformatic analysis type screening still lacks golden standard. , ScreenR allows user carry preliminary quality check experiment, visually inspect data finally identify significant hits experiment series plots cross-statistical analyses.","code":""},{"path":[]},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"bioconductor","dir":"Articles","previous_headings":"Installation","what":"Bioconductor","title":"ScreenR Example Analysis","text":"ScreenR requires several CRAN Bioconductor R packages installed. Dependencies usually handled automatically, installing package using following commands:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"ScreenR\")"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"github","dir":"Articles","previous_headings":"Installation","what":"Github","title":"ScreenR Example Analysis","text":"newest version can directly installed GitHub using CRAN package devtools:","code":"if (!require(\"devtools\", quietly = TRUE))    install.packages(\"devtools\")  devtools::install_github(\"EmanuelSoda/ScreenR\")"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"ScreenR Example Analysis","text":"reported ScreenR pipeline","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"loading-the-package","dir":"Articles","previous_headings":"Analysis","what":"Loading the package","title":"ScreenR Example Analysis","text":"installation, loading package simple :","code":"library(ScreenR) #>  #> Welcome to ScreenR #> -------------------------- #>  #> See ?ScreenR for a list of #> available functions. #>  #> Enjoy! #>"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"read-data","dir":"Articles","previous_headings":"Analysis","what":"Read Data","title":"ScreenR Example Analysis","text":"input ScreenR count table obtained barcode alignment reference genome/library. count table usually starting point RNA-seq deferentially expressed genes analysis consists matrix containing reads count organized : Genes rows Samples columns vignette use example Loss Function Chemical lethality Genetic Screening performed using shRNA libraries gene represented ten slightly different shRNA labeled unique barcode coming unpublished dataset generated using Cellecta protocol. First data read. another important step set column names following way: first part string timepoint second type sample (example: treated control name treatment) Third slot way make replicate unique (example letter number) end Time point_Type sample_replicate example h24_control_1 mean first replicate control sample 24 hour. Since dataset comes Chemical Synthetic Lethality experiments samples treated drug combined shRNAs knockdown present decreased number reads compared controls.","code":"data(count_table) data(annotation_table)  data <- count_table colnames(data) <- c(     \"Barcode\", \"Time1\", \"Time2\", \"Time3_TRT_A\", \"Time3_TRT_B\", \"Time3_TRT_C\",     \"Time3_CTRL_A\", \"Time3_CTRL_B\", \"Time3_CTRL_C\",      \"Time4_TRT_A\", \"Time4_TRT_B\", \"Time4_TRT_C\",      \"Time4_CTRL_A\", \"Time4_CTRL_B\", \"Time4_CTRL_C\" ) data <- data %>%     dplyr::mutate(Barcode = as.factor(Barcode)) %>%     dplyr::filter(Barcode != \"*\") %>%     tibble()   total_Annotation <- annotation_table"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"object-creation","dir":"Articles","previous_headings":"Analysis","what":"Object Creation","title":"ScreenR Example Analysis","text":"second needed step create ScreenR object count table. ScreenR object created using function create_screenr_object() used store important information perform analysis. ScreenR function takes main input ScreenR object perform needed operation return result.","code":"groups <- factor(c(     \"T1/T2\", \"T1/T2\",     \"Time3_TRT\", \"Time3_TRT\", \"Time3_TRT\",     \"Time3_CTRL\", \"Time3_CTRL\", \"Time3_CTRL\",     \"Time4_TRT\", \"Time4_TRT\", \"Time4_TRT\",     \"Time4_CTRL\", \"Time4_CTRL\", \"Time4_CTRL\" ))   palette <- c(\"#66c2a5\", \"#fc8d62\", rep(\"#8da0cb\", 3), rep(\"#e78ac3\", 3),     rep(\"#a6d854\", 3), rep(\"#ffd92f\", 3))   object <- create_screenr_object(     table = data, annotation = total_Annotation, groups = groups,     replicates = \"\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"removing-all-zero-rows","dir":"Articles","previous_headings":"Analysis","what":"Removing all zero rows","title":"ScreenR Example Analysis","text":"","code":"object <- remove_all_zero_row(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"computing-the-needed-tables","dir":"Articles","previous_headings":"Analysis","what":"Computing the needed tables","title":"ScreenR Example Analysis","text":"object created, data must normalized start analysis. ScreenR uses Counts Per Million (CPM) normalization following mathematical expression: \\[CPM = \\frac{Number \\; \\; mapped \\; reads \\; \\; \\; barcode}              { \\sum_{sample}{Number\\; \\;mapped \\; reads}} *10^{6}\\] number reads mapped barcode sample normalized number reads sample multiplied one million. information store data table tidy version original count table used throughout analysis.","code":"object <- normalize_data(object) object <- compute_data_table(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"quality-check","dir":"Articles","previous_headings":"Analysis","what":"Quality Check","title":"ScreenR Example Analysis","text":"first step perform dealing sequencing data check quality samples. ScreenR can done using several methods.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"mapped-reads","dir":"Articles","previous_headings":"Analysis > Quality Check","what":"Mapped Reads","title":"ScreenR Example Analysis","text":"total number mapped reads can displayed barplot formula.  example distribution can seen using boxplots density plots. #### Boxplot Mapped Reads","code":"plot <- plot_mapped_reads(object, palette) +     ggplot2::coord_flip() +     ggplot2::scale_y_continuous(labels = scales::comma) +     ggplot2::theme(legend.position = \"none\") +     ggplot2::ggtitle(\"Number of Mapped Reads in each sample\")  plot plot <- plot_mapped_reads_distribution(     object, palette,     alpha = 0.8,     type = \"boxplot\" ) +     coord_flip() +     theme(legend.position = \"none\")   plot"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"density-plot","dir":"Articles","previous_headings":"Analysis > Quality Check > Mapped Reads","what":"Density plot","title":"ScreenR Example Analysis","text":"","code":"plot <- plot_mapped_reads_distribution(     object, palette,     alpha = 0.5,     type = \"density\" ) +     ggplot2::theme(legend.position = \"none\")   plot"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"barcode-lost","dir":"Articles","previous_headings":"Analysis > Quality Check","what":"Barcode Lost","title":"ScreenR Example Analysis","text":"Another important quality check Genetic Screening performed check barcode lost experiment, meaning barcode different time points treatments results reads count equal zero. ScreenR implements function able compute plot number barcodes lost samples.  Moreover important check lost barcodes sample belong gene, order verify adequate number barcodes per gene still present. can done visualizing number barcode lost sample gene.","code":"plot <- plot_barcode_lost(screenR_Object = object, palette = palette) +     ggplot2::coord_flip() plot plot <- plot_barcode_lost_for_gene(object,     samples = c(\"Time4_TRT_C\", \"Time4_CTRL_C\") ) plot"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"plot-mds","dir":"Articles","previous_headings":"Analysis > Quality Check","what":"Plot MDS","title":"ScreenR Example Analysis","text":"order see samples clusterization initial MDS analysis can conducted. ScreenR can done using plot_mds function user can decide color code graph order highlight trend samples based replicates, treatment timepoints simply modifying field levels plot_mds function.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"for-sample","dir":"Articles","previous_headings":"Analysis > Quality Check > Plot MDS","what":"For Sample","title":"ScreenR Example Analysis","text":"","code":"plot_mds(screenR_Object = object)"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"for-treatment","dir":"Articles","previous_headings":"Analysis > Quality Check > Plot MDS","what":"For Treatment","title":"ScreenR Example Analysis","text":"","code":"group_table <- get_data_table(object)   %>%     select(Sample, Day, Treatment) %>%     distinct() #> ScreenR normalized data table containing: #>  74438 rows #>  9 columns  group_treatment <- group_table$Treatment  plot_mds(     screenR_Object = object,     groups = factor(x = group_treatment, levels = unique(group_treatment)) )"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"for-day","dir":"Articles","previous_headings":"Analysis > Quality Check > Plot MDS","what":"For Day","title":"ScreenR Example Analysis","text":"","code":"group_day <- group_table$Day  plot_mds(     screenR_Object = object,     groups = factor(x = group_day, levels = unique(group_day)) )"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"statistical-analysis","dir":"Articles","previous_headings":"Analysis","what":"Statistical Analysis","title":"ScreenR Example Analysis","text":"various steps quality check passed, actual statistical analysis can begin. statistical Analysis ScreenR based three different methods: Z-score filtering CAMERA filtering ROAST filtering","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"z-score-hit","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"Z-score hit","title":"ScreenR Example Analysis","text":"order compute Z-score, first list metrics computed. particular Log2FC computed treated vs control samples different conditions. can done using function compute_metrics(). reported example treated vs control different day. different distribution Z-score can plotted using plot_zscore_distribution function.","code":"# 2DG data_with_measure_TRT <- list(     Time3 = compute_metrics(         object,         control = \"CTRL\", treatment = \"TRT\",         day = \"Time3\"     ),     Time4 = compute_metrics(         object,         control = \"CTRL\", treatment = \"TRT\",         day = \"Time4\"     ) )  plot_zscore_distribution(data_with_measure_TRT, alpha = 0.8)"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"z-score-hit-1","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"Z-score hit","title":"ScreenR Example Analysis","text":"Based metrics Z-score hit identification can computed using find_zscore_hit function.","code":"zscore_hit_TRT <- list(     Time3 = find_zscore_hit(         table_treate_vs_control = data_with_measure_TRT$Time3,         number_barcode = 6, metric = \"median\"     ),     Time4 = find_zscore_hit(         table_treate_vs_control = data_with_measure_TRT$Time4,         number_barcode = 6, metric = \"median\"     ) ) zscore_hit_TRT #> $Time3 #> # A tibble: 83 × 2 #>    Gene     numberOfBarcode #>    <chr>              <int> #>  1 Gene_1                 7 #>  2 Gene_11                7 #>  3 Gene_116               8 #>  4 Gene_120               8 #>  5 Gene_121               7 #>  6 Gene_128               8 #>  7 Gene_15                7 #>  8 Gene_156               8 #>  9 Gene_158               7 #> 10 Gene_160               7 #> # ℹ 73 more rows #>  #> $Time4 #> # A tibble: 97 × 2 #>    Gene     numberOfBarcode #>    <chr>              <int> #>  1 Gene_107               7 #>  2 Gene_121               8 #>  3 Gene_125               7 #>  4 Gene_126               7 #>  5 Gene_134               7 #>  6 Gene_138               7 #>  7 Gene_139               7 #>  8 Gene_14                7 #>  9 Gene_147               8 #> 10 Gene_148               9 #> # ℹ 87 more rows"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"camera","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"CAMERA","title":"ScreenR Example Analysis","text":"can done CAMERA hit using function find_camera_hit.","code":"matrix_model <- model.matrix(~ groups) colnames(matrix_model) <- unique(groups)   camera_hit_TRT <- list(     Time3 = find_camera_hit(         screenR_Object = object, matrix_model = matrix_model,         contrast = \"Time3_TRT\",     ),     Time4 = find_camera_hit(         screenR_Object = object, matrix_model = matrix_model,         contrast = \"Time4_TRT\"     ) )  camera_hit_TRT #> $Time3 #> # A tibble: 258 × 5 #>    Gene     NGenes Direction   PValue      FDR #>    <chr>     <dbl> <fct>        <dbl>    <dbl> #>  1 Gene_372     12 Down      3.80e-15 1.93e-12 #>  2 Gene_364     12 Down      7.23e-15 1.93e-12 #>  3 Gene_374     10 Down      3.55e- 7 6.32e- 5 #>  4 Gene_282     10 Down      2.24e- 4 2.40e- 2 #>  5 Gene_75      10 Down      7.59e- 4 6.76e- 2 #>  6 Gene_323     10 Down      1.45e- 3 1.11e- 1 #>  7 Gene_179     10 Down      1.68e- 3 1.12e- 1 #>  8 Gene_117     10 Down      1.10e- 2 4.23e- 1 #>  9 Gene_228     10 Down      1.49e- 2 4.97e- 1 #> 10 Gene_211     10 Down      1.84e- 2 5.77e- 1 #> # ℹ 248 more rows #>  #> $Time4 #> # A tibble: 241 × 5 #>    Gene     NGenes Direction   PValue      FDR #>    <chr>     <dbl> <fct>        <dbl>    <dbl> #>  1 Gene_364     12 Down      1.13e-24 6.03e-22 #>  2 Gene_372     12 Down      3.46e-21 9.24e-19 #>  3 Gene_374     10 Down      9.55e- 8 1.70e- 5 #>  4 Gene_323     10 Down      7.27e- 7 9.70e- 5 #>  5 Gene_282     10 Down      6.22e- 6 6.64e- 4 #>  6 Gene_75      10 Down      1.76e- 5 1.57e- 3 #>  7 Gene_296     10 Down      1.31e- 4 1.00e- 2 #>  8 Gene_80      10 Down      5.72e- 4 3.82e- 2 #>  9 Gene_54      10 Down      7.94e- 3 3.26e- 1 #> 10 Gene_179     10 Down      1.13e- 2 3.94e- 1 #> # ℹ 231 more rows"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"roast","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"ROAST","title":"ScreenR Example Analysis","text":"Last least done also ROAST hit using functionfind_roast_hit.","code":"roast_hit_TRT <- list(     Time3 = find_roast_hit(         screenR_Object = object, matrix_model = matrix_model,         contrast = \"Time3_TRT\",      ),     Time4 = find_roast_hit(         screenR_Object = object, matrix_model = matrix_model,         contrast = \"Time4_TRT\"     ) )  roast_hit_TRT #> $Time3 #> # A tibble: 29 × 9 #>    Gene   NGenes PropDown PropUp Direction PValue     FDR PValue.Mixed FDR.Mixed #>    <chr>   <int>    <dbl>  <dbl> <fct>      <dbl>   <dbl>        <dbl>     <dbl> #>  1 Gene_…     12    0.917    0   Down      0.0001 0.00668       0.0001    0.0134 #>  2 Gene_…     12    0.833    0   Down      0.0001 0.00668       0.0001    0.0134 #>  3 Gene_…     10    0.7      0   Down      0.0001 0.00668       0.0006    0.0734 #>  4 Gene_…     10    0.4      0   Down      0.0004 0.0312        0.022     0.246  #>  5 Gene_…     10    0.3      0   Down      0.0004 0.0312        0.0191    0.239  #>  6 Gene_…     10    0.5      0.1 Down      0.0009 0.0634        0.0018    0.116  #>  7 Gene_…     10    0.5      0   Down      0.001  0.0634        0.0227    0.247  #>  8 Gene_…     10    0.4      0.1 Down      0.0061 0.181         0.0104    0.166  #>  9 Gene_…     10    0.2      0   Down      0.0062 0.181         0.0753    0.413  #> 10 Gene_…     10    0.2      0   Down      0.0064 0.181         0.0235    0.250  #> # ℹ 19 more rows #>  #> $Time4 #> # A tibble: 104 × 9 #>    Gene   NGenes PropDown PropUp Direction PValue     FDR PValue.Mixed FDR.Mixed #>    <chr>   <int>    <dbl>  <dbl> <fct>      <dbl>   <dbl>        <dbl>     <dbl> #>  1 Gene_…     12      1      0   Down      0.0001 0.00167       0.0001  0.000668 #>  2 Gene_…     12      1      0   Down      0.0001 0.00167       0.0001  0.000668 #>  3 Gene_…     10      0.9    0   Down      0.0001 0.00167       0.0001  0.000668 #>  4 Gene_…     10      0.9    0   Down      0.0001 0.00167       0.0001  0.000668 #>  5 Gene_…     10      0.7    0   Down      0.0001 0.00167       0.0001  0.000668 #>  6 Gene_…     10      0.7    0.1 Down      0.0001 0.00167       0.0001  0.000668 #>  7 Gene_…     10      0.7    0   Down      0.0001 0.00167       0.0001  0.000668 #>  8 Gene_…     10      0.7    0   Down      0.0001 0.00167       0.0001  0.000668 #>  9 Gene_…     10      0.6    0   Down      0.0001 0.00167       0.0007  0.00358  #> 10 Gene_…     10      0.5    0.3 Down      0.0001 0.00167       0.0002  0.00148  #> # ℹ 94 more rows"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"find-common-hit","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"Find Common Hit","title":"ScreenR Example Analysis","text":"ScreenR considers final hit one result candidate hit three statistical methods. However particularly stringent method cases leads small number results. reason user can also decide opt less stringent method considers hits present least two statistical methods. two different strategies can computed function:: common_hit_TRT_at_least_2: considering candidate Hits one present least two three methods (less stringent) common_hit_TRT_at_least_3: considering candidate Hits one present three methods","code":"common_hit_TRT_at_least_2 <- list(     Time3 = find_common_hit(         zscore_hit_TRT$Time3, camera_hit_TRT$Time3, roast_hit_TRT$Day3,         common_in = 2     ),     Time4 = find_common_hit(         zscore_hit_TRT$Time4, camera_hit_TRT$Time4, roast_hit_TRT$Day6,         common_in = 2     ) )  common_hit_TRT_at_least_3 <- list(     Time3 = find_common_hit(         zscore_hit_TRT$Time3, camera_hit_TRT$Time3, roast_hit_TRT$Time3,         common_in = 3     ),     Time4 = find_common_hit(         zscore_hit_TRT$Time4, camera_hit_TRT$Time4, roast_hit_TRT$Time4,         common_in = 3     ) )"},{"path":"https://emanuelsoda.github.io/ScreenR/articles/Analysis_Example.html","id":"plot-common-hit","dir":"Articles","previous_headings":"Analysis > Statistical Analysis","what":"Plot common hit","title":"ScreenR Example Analysis","text":"intersection hits found three statistical methods can easily visualized using plot_common_hit function.  know, deal statistical methods possibility type error also known “false positive”. reason important visualize results obtained. can done visualizing trend candidate hits obtained using function plot_trend.","code":"plot_common_hit(     hit_zscore = zscore_hit_TRT$Time4, hit_camera = camera_hit_TRT$Time4,     roast_hit_TRT$Time4, show_elements = FALSE, show_percentage = TRUE ) candidate_hits <- common_hit_TRT_at_least_2$Time3  plot_trend(screenR_Object = object,             genes = candidate_hits[1],             nrow = 2, ncol = 2,             group_var = c(\"Time1\", \"Time2\", \"TRT\")) plot_trend(screenR_Object = object,             genes = candidate_hits[2],             nrow = 2, ncol = 2,             group_var = c(\"Time1\", \"Time2\", \"TRT\")) sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ScreenR_0.99.55  tidyr_1.3.0      dplyr_1.1.3      ggplot2_3.4.3    #> [5] BiocStyle_2.28.0 #>  #> loaded via a namespace (and not attached): #>  [1] sass_0.4.7          utf8_1.2.3          generics_0.1.3      #>  [4] stringi_1.7.12      lattice_0.21-8      digest_0.6.33       #>  [7] magrittr_2.0.3      evaluate_0.21       grid_4.3.1          #> [10] bookdown_0.35       fastmap_1.1.1       Matrix_1.5-4.1      #> [13] rprojroot_2.0.3     jsonlite_1.8.7      limma_3.56.2        #> [16] BiocManager_1.30.22 mgcv_1.8-42         purrr_1.0.2         #> [19] fansi_1.0.4         scales_1.2.1        textshaping_0.3.6   #> [22] jquerylib_0.1.4     cli_3.6.1           rlang_1.1.1         #> [25] splines_4.3.1       munsell_0.5.0       withr_2.5.0         #> [28] cachem_1.0.8        yaml_2.3.7          tools_4.3.1         #> [31] memoise_2.0.1       colorspace_2.1-0    locfit_1.5-9.8      #> [34] ggvenn_0.1.10       vctrs_0.6.3         R6_2.5.1            #> [37] lifecycle_1.0.3     stringr_1.5.0       edgeR_3.42.4        #> [40] fs_1.6.3            ragg_1.2.5          pkgconfig_2.0.3     #> [43] desc_1.4.2          pkgdown_2.0.7       pillar_1.9.0        #> [46] bslib_0.5.1         gtable_0.3.4        glue_1.6.2          #> [49] Rcpp_1.0.11         systemfonts_1.0.4   highr_0.10          #> [52] xfun_0.40           tibble_3.2.1        tidyselect_1.2.0    #> [55] knitr_1.43          farver_2.1.1        nlme_3.1-162        #> [58] patchwork_1.1.3     htmltools_0.5.6     labeling_0.4.3      #> [61] rmarkdown_2.24      compiler_4.3.1"},{"path":"https://emanuelsoda.github.io/ScreenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emanuel Michele Soda. Author, maintainer.            0000-0002-2301-6465 Elena Ceccacci. Author.            0000-0002-2285-8994 Saverio Minucci. Funder, thesis advisor.            0000-0001-5678-536X","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Soda E, Ceccacci E (2023). ScreenR: Package Perform High Throughput Biological Screening. R package version 0.99.55, https://emanuelsoda.github.io/ScreenR/.","code":"@Manual{,   title = {ScreenR: Package to Perform High Throughput Biological Screening},   author = {Emanuel Michele Soda and Elena Ceccacci},   year = {2023},   note = {R package version 0.99.55},   url = {https://emanuelsoda.github.io/ScreenR/}, }"},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"screenr-","dir":"","previous_headings":"","what":"Package to Perform High Throughput Biological Screening","title":"Package to Perform High Throughput Biological Screening","text":"ScreenR easy effective package perform hits identification loss function High Throughput Biological Screening performed shRNAs library. ScreenR combines power software like edgeR simplicity Tidyverse metapackage. ScreenR executes pipeline able find candidate hits barcode counts data integrates wide range visualization step analysis","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Package to Perform High Throughput Biological Screening","text":"Get latest stable R release CRAN note need R 4.3 greater use ScreenR. install ScreenR Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"ScreenR\") devtools::install_github(\"EmanuelSoda/ScreenR\")"},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"screenr-overall-workflow","dir":"","previous_headings":"","what":"ScreenR overall workflow","title":"Package to Perform High Throughput Biological Screening","text":"Please note ScreenR made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Package to Perform High Throughput Biological Screening","text":"citation output using citation('ScreenR') R. Please run check updates cite ScreenR.","code":"print(citation('ScreenR')) #>  #> To cite package 'ScreenR' in publications use: #>  #>   Soda E, Ceccacci E (2022). _ScreenR: Package to Perform High #>   Throughput Biological Screening_. R package version 0.99.53, #>   <https://emanuelsoda.github.io/ScreenR/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {ScreenR: Package to Perform High Throughput Biological Screening}, #>     author = {Emanuel Michele Soda and Elena Ceccacci}, #>     year = {2022}, #>     note = {R package version 0.99.53}, #>     url = {https://emanuelsoda.github.io/ScreenR/}, #>   }"},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Package to Perform High Throughput Biological Screening","text":"Please note ScreenR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Package to Perform High Throughput Biological Screening","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/ScreenR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for analyzing shRNAs screening data — ScreenR-package","title":"Tools for analyzing shRNAs screening data — ScreenR-package","text":"ScreenR easy effective package perform hits identification loss function High Throughput Biological Screening performed shRNAs library. ScreenR combines power software like edgeR simplicity Tidyverse metapackage. ScreenR executes pipeline able find candidate hits barcode counts data integrates wide range visualization step analysis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/ScreenR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for analyzing shRNAs screening data — ScreenR-package","text":"ScreenR takes count table input create screenr_object perform analysis. Throught pipeline ScreenR enable user perform quality control, visual inspection, dimensionality reduction data. Using three statistical methods: ROAST CAMERA Z-score able find new candidate hits. Moreover order improve quality hit found also possible filter list hit using filter like variance slope filters.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/ScreenR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tools for analyzing shRNAs screening data — ScreenR-package","text":"Emanuel Michele Soda emanuelsoda@gmail.com","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table for the annotation of Barcode — annotation_table","title":"Table for the annotation of Barcode — annotation_table","text":"Table annotation Barcode","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table for the annotation of Barcode — annotation_table","text":"","code":"data(annotation_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/annotation_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table for the annotation of Barcode — annotation_table","text":"data frame 5320 rows 2 columns obtained         loss--function genetic screening. table used         store information shRNAs: Gene Contains gene name Barcode contains ID identify barcode                  (unique identifier shRNA).                  t can use merge annotation table t                  count table Gene_ID Contains unique Gene ID Sequence contains cDNA sequence shRNA associated                   barcode Library contains library shRNA come .                  case pooled                  https://cellecta.com/cellecta","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/barcode_lost.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of barcode lost — barcode_lost","title":"Count number of barcode lost — barcode_lost","text":"function counts number barcodes lost              sequencing. barcode lost associated shRNA zero              mapped read sample.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/barcode_lost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of barcode lost — barcode_lost","text":"","code":"barcode_lost(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/barcode_lost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of barcode lost — barcode_lost","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/barcode_lost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count number of barcode lost — barcode_lost","text":"Return tibble containing number barcode lost         sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/barcode_lost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count number of barcode lost — barcode_lost","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  # In order to count the number of barcodes lost just the ScreenR object is # needed head(barcode_lost(object)) #> # A tibble: 6 × 2 #>   Sample      LostBarcode #>   <fct>             <int> #> 1 T1                    5 #> 2 T2                   21 #> 3 Time3_TRT_A          27 #> 4 Time3_TRT_B          28 #> 5 Time3_TRT_C          27 #> 6 Time3_A               9"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_camera.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Camera — compute_camera","title":"Compute Camera — compute_camera","text":"internal function computes actual hits using               camera method.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_camera.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Camera — compute_camera","text":"","code":"compute_camera(   xglm,   lrt,   DGEList,   matrix_model,   contrast,   number_barcode = 3,   thresh = 1e-04,   lfc = 1 )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_camera.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Camera — compute_camera","text":"xglm object created estimateDisp lrt object created glmFit DGEList edgeR object ... Arguments passed find_camera_hit matrix_model matrix used perform linear model analysis created using model.matrix thresh threshold False Discovery Rate (FDR) used select statistically significant hits. lfc Log2FC threshold. number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_camera.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Camera — compute_camera","text":"list hits found camera method","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_data_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute data Table — compute_data_table","title":"Compute data Table — compute_data_table","text":"function computes data table used              analysis. data_table tidy normalized              version original count_table used              throughout analysis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_data_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute data Table — compute_data_table","text":"","code":"compute_data_table(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_data_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute data Table — compute_data_table","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_data_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute data Table — compute_data_table","text":"ScreenR_Object data_table filed containing table.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_data_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute data Table — compute_data_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) object <- compute_data_table(object) head(slot(object, \"data_table\")) #> # A tibble: 6 × 9 #>   Barcode Gene     Sample     Frequency Sequence Library Gene_ID Day   Treatment #>   <fct>   <chr>    <fct>          <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #> 1 10208   Gene_380 T1              330. NA       NA      NA      T1    T1        #> 2 10208   Gene_380 T2              437. NA       NA      NA      T2    T2        #> 3 10208   Gene_380 Time3_TRT…      365. NA       NA      NA      Time3 TRT       #> 4 10208   Gene_380 Time3_TRT…      439. NA       NA      NA      Time3 TRT       #> 5 10208   Gene_380 Time3_TRT…      311. NA       NA      NA      Time3 TRT       #> 6 10208   Gene_380 Time3_A         358. NA       NA      NA      Time3 Time3"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_explained_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute explained variance — compute_explained_variance","title":"Compute explained variance — compute_explained_variance","text":" internal function  used compute              explained variance Principal Components.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_explained_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute explained variance — compute_explained_variance","text":"","code":"compute_explained_variance(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_explained_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute explained variance — compute_explained_variance","text":"screenR_Object Object package","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_explained_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute explained variance — compute_explained_variance","text":"data.frame containing information variance         expressed components","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_explained_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute explained variance — compute_explained_variance","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  compute_explained_variance(object) #>                     Name         PC1         PC2         PC3        PC4 #> 1     Standard deviation 27020.11492 17798.98865 10637.33427 9752.58832 #> 2 Proportion of Variance     0.43304     0.18791     0.06712    0.05642 #> 3  Cumulative Proportion     0.43304     0.62095     0.68807    0.74448 #>          PC5        PC6        PC7        PC8        PC9       PC10       PC11 #> 1 8498.64745 7915.02711 7755.60776 7359.95708 7126.65824 6787.07374 6274.56580 #> 2    0.04284    0.03716    0.03568    0.03213    0.03013    0.02732    0.02335 #> 3    0.78733    0.82448    0.86016    0.89229    0.92242    0.94974    0.97309 #>         PC12       PC13         PC14 #> 1 5190.01211 4293.13649 1.457285e-11 #> 2    0.01598    0.01093 0.000000e+00 #> 3    0.98907    1.00000 1.000000e+00"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Metrics — compute_metrics","title":"Compute Metrics — compute_metrics","text":"function computes metrics used              compute z-score using function              find_zscore_hit starting screenr object              given treatment given day. information              z-score metrics used genetic screening can found              paper              z-score","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Metrics — compute_metrics","text":"","code":"compute_metrics(screenR_Object, control, treatment, day)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Metrics — compute_metrics","text":"screenR_Object ScreenR object obtained using create_screenr_object control string specifying sample used control analysis. string equal interested sample Treatment column data_table slot treatment string specifying sample used treatment analysis. string equal interested sample Treatment column data_table slot. day string containing day (time point) consider metrics computation. string equal interested sample Day column data_table slot.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Metrics — compute_metrics","text":"Return tibble measure computed.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Metrics — compute_metrics","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) metrics <- compute_metrics(object,     control = \"TRT\",     treatment = \"Time3\", day = \"Time3\" ) head(metrics) #> # A tibble: 6 × 9 #>   Barcode Gene     Treated Control  Log2FC  Zscore ZscoreRobust Day   Treatment #>   <fct>   <chr>      <dbl>   <dbl>   <dbl>   <dbl>        <dbl> <chr> <chr>     #> 1 1       Gene_386   326.    296.   0.140   0.291         1.23  Time3 Time3     #> 2 10      Gene_519   110.    115.  -0.0621 -0.136        -0.574 Time3 Time3     #> 3 100     Gene_84     16.9    30.8 -0.868  -1.84         -7.77  Time3 Time3     #> 4 1000    Gene_350   127.    130.  -0.0344 -0.0773       -0.327 Time3 Time3     #> 5 10001   Gene_379   492.    463.   0.0895  0.184         0.779 Time3 Time3     #> 6 10002   Gene_379   147.    169.  -0.201  -0.430        -1.82  Time3 Time3"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Slope of a Gene — compute_slope","title":"Compute Slope of a Gene — compute_slope","text":"function used compute slope gene passed              input","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Slope of a Gene — compute_slope","text":"","code":"compute_slope(screenR_Object, genes, group_var)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Slope of a Gene — compute_slope","text":"screenR_Object ScreenR object obtained using create_screenr_object genes genes slope computed. genes result three statistical methods selection group_var variable use  independent variable (x) linear model","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Slope of a Gene — compute_slope","text":"tibble containing row gene corresponding Slope","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Slope of a Gene — compute_slope","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  compute_slope(object,     genes = c(\"Gene_42\", \"Gene_24\"),     group_var = c(\"T1\", \"T2\", \"TRT\") ) #> # A tibble: 2 × 2 #> # Rowwise:  Gene #>   Gene     Slope #>   <chr>    <dbl> #> 1 Gene_24  0.131 #> 2 Gene_42 -1.98"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute trend — compute_trend","title":"Compute trend — compute_trend","text":"internal function  used computes trend              gene","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute trend — compute_trend","text":"","code":"compute_trend(screenR_Object, genes, group_var)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute trend — compute_trend","text":"screenR_Object object created estimateDisp genes list genes group_var variable used grouping variable","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/compute_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute trend — compute_trend","text":"table trend genes passed input","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_mapped_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of mapped read — count_mapped_reads","title":"Count the number of mapped read — count_mapped_reads","text":"function counts number reads barcode              sample. quality control function (QC) see              biological protocol went planned.              sample low mapped compared means              lower quality.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_mapped_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of mapped read — count_mapped_reads","text":"","code":"count_mapped_reads(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_mapped_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of mapped read — count_mapped_reads","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_mapped_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of mapped read — count_mapped_reads","text":"Return tibble containing number mapped read sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_mapped_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of mapped read — count_mapped_reads","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) head(count_mapped_reads(object)) #> # A tibble: 6 × 3 #>   Barcode Sample Mapped #>   <fct>   <fct>   <int> #> 1 10208   T1       3520 #> 2 10502   T1        280 #> 3 10796   T1       1507 #> 4 11089   T1       3797 #> 5 11382   T1        717 #> 6 11675   T1       7330"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of the count table — count_table","title":"Table of the count table — count_table","text":"Table count table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of the count table — count_table","text":"","code":"data(count_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/count_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of the count table — count_table","text":"data frame 5323 rows 15 variables obtained         barcode alignment reference library.         generated [Cellecta](https://cellecta.com/) protocol.         samples generated sequenced using RNA-seq protocol.         Due fact different shRNAs sequenced gene         barcode associated reads. reads aligned         reference library using [bowtie2](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml)         sorted [samtools](https://github.com/samtools/samtools).         Since dataset comes Chemical Synthetic Lethality         experiments samples treated combined shRNAs         knockdown present decreased number reads compared         controls. Barcode contains ID identify barcode. can use   marge annotation table count table. Barcode unique   identifier shRNA. genetic screening multiple slightly different   shRNAs perform knockout gene efficacy. reason   important keep track shRNA using unique barcode. Time_1 contains counts time zero.                first time point cells treated                infected. Time_2 contains counts cell washed.                time point cells  infected following                Cellecta protocol washed puromycin. Time_3_TRT_rep1 contains counts first replicate                 treated first time point.                 Usually first time  point 7 day puromycin                 wash. Time_3_TRT_rep2 contains counts second replicate                 treated first time point. Usually first                 time point 7 day puromycin wash. Time_3_TRT_rep3 contains counts third replicate                 treated first time point. Usually first                 time point 7 day puromycin wash. Time_3_rep1 contains counts first replicate                 control first time point. Usually first                 time point 7 day puromycin wash. Time_3_rep2 contains counts second replicate                 control first time point. Usually first                 time point 7 day puromycin wash. Time_3_rep3 contains counts third replicate                 control first time point. Usually first                 time point 7 day puromycin  wash. Time_4_TRT_rep1 contains counts first replicate                 treated second time point. Usually first                 time point 14 day puromycin wash. Time_4_TRT_rep2 contains counts second replicate                 treated second time point. Usually first                 time point 14 day puromycin wash. Time_4_TRT_rep3 contains counts third replicate                 treated second time point. Usually first                 time point 14 day puromycin wash. Time_4_rep1 contains counts first replicate                 control second time point. Usually first                 time point 14 day puromycin wash. Time_4_rep2 contains counts second replicate                 control second time point. Usually first                 time point 14 day puromycin wash. Time_4_rep3 contains counts third replicate                 control second time point. Usually first                 time point 14 day puromycin wash.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_edger_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Create edgeR Object — create_edger_obj","title":"Create edgeR Object — create_edger_obj","text":"Utility function using screenr-class              object create corresponding edgeR object.              function utility function enables user              worry abut implementation just focus              analysis. ScreenR package take care rest.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_edger_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create edgeR Object — create_edger_obj","text":"","code":"create_edger_obj(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_edger_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create edgeR Object — create_edger_obj","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_edger_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create edgeR Object — create_edger_obj","text":"edgeR object needed information analysis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_edger_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create edgeR Object — create_edger_obj","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) create_edger_obj(object) #> An object of class \"DGEList\" #> $counts #>          T1        T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C   Time3_A   Time3_B #> 1 329.84259 437.05313   365.28131   438.98590   310.56195 357.71537 424.65120 #> 2  26.23748  34.59281    20.51319    59.51235    16.67032  49.34005  17.41192 #> 3 141.21386 156.43298   164.10552   123.52655   132.33355 119.76559 121.43982 #> 4 355.79896 423.58336   336.41632   423.50391   375.08227 387.65676 346.46392 #> 5  67.18669  65.71614    82.63885    36.89326    26.34323  58.40681  65.43333 #>     Time3_C Time4_TRT_A Time4_TRT_B Time4_TRT_C   Time4_A   Time4_B   Time4_c #> 1 363.06161   323.48640   382.06214   456.79054 338.12714 358.16244 390.75227 #> 2  16.93033    32.46057    15.37962    33.91447  63.18147  29.41115  20.28906 #> 3 126.87300    14.21549    39.96678    50.70943  43.66670  41.17561  90.38830 #> 4 361.38947   259.79652   325.90629   280.80853 359.96049 338.11929 274.92213 #> 5  76.81355    35.70663    10.72526    32.53517  12.26918  43.89886  71.49478 #> 5315 more rows ... #>  #> $samples #>               group lib.size norm.factors #> T1            T1/T2    1e+06            1 #> T2            T1/T2    1e+06            1 #> Time3_TRT_A Treated    1e+06            1 #> Time3_TRT_B Treated    1e+06            1 #> Time3_TRT_C Treated    1e+06            1 #> 9 more rows ... #>  #> $genes #>       Gene Barcode Gene_ID Sequence Library #> 1 Gene_380   10208      NA       NA      NA #> 2 Gene_380   10502      NA       NA      NA #> 3 Gene_380   10796      NA       NA      NA #> 4 Gene_380   11089      NA       NA      NA #> 5 Gene_380   11382      NA       NA      NA #> 5315 more rows ... #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_screenr_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the ScreenR Object — create_screenr_object","title":"Create the ScreenR Object — create_screenr_object","text":"Initial function create Screen Object.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_screenr_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the ScreenR Object — create_screenr_object","text":"","code":"create_screenr_object(   table = NULL,   annotation = NULL,   groups = NULL,   replicates = c(\"\") )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_screenr_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the ScreenR Object — create_screenr_object","text":"table count table obtained read alignment contains Barcodes rows samples columns. annotation annotation table containing information Barcode association corresponding Gene groups factor containing experimental design label replicates vector containing replicates label","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_screenr_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create the ScreenR Object — create_screenr_object","text":"object containing needed information analysis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/create_screenr_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create the ScreenR Object — create_screenr_object","text":"","code":"count_table <-     data.frame(         Barcode = c(\"Code_1\", \"Code_2\", \"Code_3\", \"Code_3\"),         Time_3_rep1 = c(\"3520\", \"3020\", \"1507\", \"1400\"),         Time_3_rep2 = c(\"3500\", \"3000\", \"1457\", \"1490\"),         Time_3_TRT_rep1 = c(\"1200\", \"1100\", \"1300\", \"1350\"),         Time_3_TRT_rep2 = c(\"1250\", \"1000\", \"1400\", \"1375\")     ) annotation_table <-     data.frame(         Gene = c(\"Gene_1\", \"Gene_1\", \"Code_2\", \"Code_2\"),         Barcode = c(\"Code_1\", \"Code_2\", \"Code_3\", \"Code_3\"),         Gene_ID = rep(NA, 4), Sequence = rep(NA, 4),         Library = rep(NA, 4)     )  groups <- factor(c(\"Control\", \"Control\", \"Treated\", \"Treated\")) obj <- create_screenr_object(     table = count_table,     annotation = annotation_table,     groups = groups, replicates = c(\"\") ) obj #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 4 × 5 #>   Barcode Time_3_rep1 Time_3_rep2 Time_3_TRT_rep1 Time_3_TRT_rep2 #>   <chr>   <chr>       <chr>       <chr>           <chr>           #> 1 Code_1  3520        3500        1200            1250            #> 2 Code_2  3020        3000        1100            1000            #> 3 Code_3  1507        1457        1300            1400            #> 4 Code_3  1400        1490        1350            1375            #>  #> Slot \"annotation_table\": #> # A tibble: 4 × 5 #>   Gene   Barcode Gene_ID Sequence Library #>   <chr>  <chr>   <lgl>   <lgl>    <lgl>   #> 1 Gene_1 Code_1  NA      NA       NA      #> 2 Gene_1 Code_2  NA      NA       NA      #> 3 Code_2 Code_3  NA      NA       NA      #> 4 Code_2 Code_3  NA      NA       NA      #>  #> Slot \"groups\": #> [1] Control Control Treated Treated #> Levels: Control Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 0 × 0 #>  #> Slot \"data_table\": #> # A tibble: 0 × 0 #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter using the slope filter — filter_by_slope","title":"Filter using the slope filter — filter_by_slope","text":"function used improve quality hits found.              computes regression line different samples ad uses              slope line see trend","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter using the slope filter — filter_by_slope","text":"","code":"filter_by_slope(   screenR_Object,   genes,   group_var_treatment,   group_var_control,   slope_control,   slope_treatment )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter using the slope filter — filter_by_slope","text":"screenR_Object ScreenR object obtained using create_screenr_object genes genes slope computed. genes result three statistical methods selection group_var_treatment variable use independent variable (x) linear model treatment group_var_control variable use independent variable (x) linear model control slope_control value used threshold control slope slope_treatment value used threshold treatment slope","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter using the slope filter — filter_by_slope","text":"data frame slope treatment control         gene","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter using the slope filter — filter_by_slope","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  filter_by_slope(     screenR_Object = object, genes = c(\"Gene_1\", \"Gene_2\"),     group_var_treatment = c(\"T1\", \"T2\", \"TRT\"),     group_var_control = c(\"T1\", \"T2\", \"Time3\", \"Time4\"),     slope_control = 0.5, slope_treatment = 1 ) #> [1]        NA  2.163455 -3.866243 #> # A tibble: 1 × 3 #>   Gene   slope_control slope_treatment #>   <chr>          <dbl>           <dbl> #> 1 Gene_2         -3.87           -4.07"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter using the variance filter — filter_by_variance","title":"Filter using the variance filter — filter_by_variance","text":"function used improve quality hits.              compute variance among hits filter one              value greater threshold set","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter using the variance filter — filter_by_variance","text":"","code":"filter_by_variance(   screenR_Object,   genes,   matrix_model,   variance = 0.5,   contrast )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter using the variance filter — filter_by_variance","text":"screenR_Object ScreenR object obtained using create_screenr_object genes genes variance computed. genes result three statistical methods selection matrix_model matrix created using model.matrix variance maximum value variance accepted contrast variable use X linear model Treatment","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter using the variance filter — filter_by_variance","text":"data frame variance treatment control         gene","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/filter_by_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter using the variance filter — filter_by_variance","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) matrix_model <- model.matrix(~ slot(object, \"groups\")) colnames(matrix_model) <- c(\"Control\", \"T1_T2\", \"Treated\") contrast <- limma::makeContrasts(Treated - Control, levels = matrix_model)  data <- filter_by_variance(     screenR_Object = object, genes = c(\"Gene_42\"),     matrix_model = matrix_model, contrast = contrast ) head(data) #> # A tibble: 6 × 10 #>   Barcode Gene    Sample      Frequency Sequence Library Gene_ID Day   Treatment #>   <fct>   <chr>   <fct>           <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #> 1 12937   Gene_42 T1               471. NA       NA      NA      T1    T1        #> 2 12937   Gene_42 T2               406. NA       NA      NA      T2    T2        #> 3 12937   Gene_42 Time3_TRT_A      365. NA       NA      NA      Time3 TRT       #> 4 12937   Gene_42 Time3_TRT_B      448. NA       NA      NA      Time3 TRT       #> 5 12937   Gene_42 Time3_TRT_C      394. NA       NA      NA      Time3 TRT       #> 6 12937   Gene_42 Time3_A          459. NA       NA      NA      Time3 Time3     #> # ℹ 1 more variable: Variance <dbl>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_camera_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Camera Hit — find_camera_hit","title":"Find Camera Hit — find_camera_hit","text":"function implements method proposed Wu              Smyth (2012).              original camera method gene set              test, applied contest genetic screening              erforms competitive barcode set test.              paper can found      CAMERA","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_camera_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Camera Hit — find_camera_hit","text":"","code":"find_camera_hit(   screenR_Object,   matrix_model,   contrast,   number_barcode = 3,   thresh = 1e-04,   lfc = 1,   direction = \"Down\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_camera_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Camera Hit — find_camera_hit","text":"screenR_Object ScreenR object obtained using create_screenr_object matrix_model matrix used perform linear model analysis created using model.matrix contrast vector single value indicating index name column model_matrix perform analysis number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE. thresh threshold False Discovery Rate (FDR) used select statistically significant hits. lfc Log2FC threshold. direction String containing direction variation, \"\" regulation \"\" regulation.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_camera_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Camera Hit — find_camera_hit","text":"data frame containing hit found using camera method","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_camera_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Camera Hit — find_camera_hit","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  matrix <- model.matrix(~ slot(object, \"groups\")) colnames(matrix) <- c(\"Control\", \"T1/T2\", \"Treated\")  result <- find_camera_hit(     screenR_Object = object,     matrix_model = matrix, contrast = \"Treated\" ) #> Warning: 3rows with all zero counts #> Warning: Zero sample variances detected, have been offset away from zero head(result) #> # A tibble: 6 × 5 #>   Gene     NGenes Direction    PValue    FDR #>   <chr>     <dbl> <fct>         <dbl>  <dbl> #> 1 Gene_173     10 Down      0.0000286 0.0153 #> 2 Gene_15      10 Down      0.00371   0.372  #> 3 Gene_352     10 Down      0.00779   0.485  #> 4 Gene_121     10 Down      0.0111    0.533  #> 5 Gene_422     10 Down      0.0128    0.533  #> 6 Gene_377     10 Down      0.0129    0.533"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_common_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Find common hit — find_common_hit","title":"Find common hit — find_common_hit","text":"method find hit common three methods","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_common_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find common hit — find_common_hit","text":"","code":"find_common_hit(hit_zscore, hit_camera, hit_roast, common_in = 3)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_common_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find common hit — find_common_hit","text":"hit_zscore matrix obtained find_zscore_hit method hit_camera matrix obtained find_camera_hit method hit_roast matrix obtained find_roast_hit method common_in Number methods hit common order considered candidate hit. default value 3, means present result three methods.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_common_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find common hit — find_common_hit","text":"vector containing common hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_common_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find common hit — find_common_hit","text":"","code":"hit_zscore <- data.frame(Gene = c(\"A\", \"B\", \"C\", \"D\", \"E\")) hit_camera <- data.frame(Gene = c(\"A\", \"B\", \"C\", \"F\", \"H\", \"G\")) hit_roast <- data.frame(Gene = c(\"A\", \"L\", \"N\"))  # common among all the three methods find_common_hit(hit_zscore, hit_camera, hit_roast) #> [1] \"A\"  # common among at least two of the three methods find_common_hit(hit_zscore, hit_camera, hit_roast, common_in = 2) #> [1] \"A\" \"B\" \"C\""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_roast_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Roast Hit — find_roast_hit","title":"Find Roast Hit — find_roast_hit","text":"Find hit using roast method. Roast competitive gene              set test uses rotation instead permutation.              applied contest genetic screening perform              barcode competitive test testing barcode              differentially expressed within gene. information can              found           Roast","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_roast_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Roast Hit — find_roast_hit","text":"","code":"find_roast_hit(   screenR_Object,   matrix_model,   contrast,   nrot = 9999,   number_barcode = 3,   direction = \"Down\",   p_val = 0.05 )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_roast_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Roast Hit — find_roast_hit","text":"screenR_Object ScreenR object obtained using create_screenr_object matrix_model matrix used perform linear model analysis. Created using model.matrix contrast vector single value indicating index name column model_matrix perform analysis nrot Number rotation perform test. Higher number rotation leads statistically significant result. number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE. direction Direction variation p_val value used p-value cut ","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_roast_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Roast Hit — find_roast_hit","text":"hits found ROAST method","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_roast_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Roast Hit — find_roast_hit","text":"","code":"set.seed(42) object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) matrix_model <- model.matrix(~ slot(object, \"groups\")) colnames(matrix_model) <- c(\"Control\", \"T1_T2\", \"Treated\")  result <- find_roast_hit(object,     matrix_model = matrix_model,     contrast = \"Treated\", nrot = 100 ) #> Warning: 3rows with all zero counts head(result) #> # A tibble: 6 × 9 #>   Gene     NGenes PropDown PropUp Direction  PValue   FDR PValue.Mixed FDR.Mixed #>   <chr>     <int>    <dbl>  <dbl> <fct>       <dbl> <dbl>        <dbl>     <dbl> #> 1 Gene_173     10      0.7    0   Down      0.00990 0.264      0.00990     0.610 #> 2 Gene_15      10      0.4    0   Down      0.00990 0.264      0.00990     0.610 #> 3 Gene_121     10      0.4    0   Down      0.00990 0.264      0.00990     0.610 #> 4 Gene_293     10      0.4    0.1 Down      0.00990 0.264      0.0198      0.610 #> 5 Gene_394     10      0.3    0   Down      0.00990 0.264      0.366       0.846 #> 6 Gene_457     10      0.2    0   Down      0.00990 0.264      0.455       0.846"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_robust_zscore_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Find robust Z-score Hit — find_robust_zscore_hit","title":"Title Find robust Z-score Hit — find_robust_zscore_hit","text":"Title Find robust Z-score Hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_robust_zscore_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Find robust Z-score Hit — find_robust_zscore_hit","text":"","code":"find_robust_zscore_hit(table_treate_vs_control, number_barcode)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_robust_zscore_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Find robust Z-score Hit — find_robust_zscore_hit","text":"table_treate_vs_control table computed function compute_data_table. contain barcode associated Gene counts treated control value Log2FC, Zscore, ZscoreRobust day. number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_robust_zscore_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Find robust Z-score Hit — find_robust_zscore_hit","text":"Return tibble containing hit robust Z-score","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_robust_zscore_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Find robust Z-score Hit — find_robust_zscore_hit","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) table <- compute_metrics(object,     control = \"TRT\", treatment = \"Time3\",     day = \"Time3\" ) result <- find_robust_zscore_hit(table, number_barcode = 6) head(result) #> # A tibble: 6 × 2 #> # Groups:   numberOfBarcode [2] #>   Gene     numberOfBarcode #>   <chr>              <int> #> 1 Gene_102               8 #> 2 Gene_115               7 #> 3 Gene_117               7 #> 4 Gene_124               7 #> 5 Gene_129               7 #> 6 Gene_13                7"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_zscore_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Title Find Z-score Hit — find_zscore_hit","title":"Title Find Z-score Hit — find_zscore_hit","text":"Title Find Z-score Hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_zscore_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title Find Z-score Hit — find_zscore_hit","text":"","code":"find_zscore_hit(table_treate_vs_control, number_barcode = 6, metric = \"median\")"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_zscore_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title Find Z-score Hit — find_zscore_hit","text":"table_treate_vs_control table computed function compute_data_table number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE. metric string containing metric use. value allowed \"median\" \"mean\".","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_zscore_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title Find Z-score Hit — find_zscore_hit","text":"Return tibble containing hit Z-score","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/find_zscore_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title Find Z-score Hit — find_zscore_hit","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) table <- compute_metrics(object,     control = \"TRT\", treatment = \"Time3\",     day = \"Time3\" )  # For the the median result <- find_zscore_hit(table, number_barcode = 6) head(result) #> # A tibble: 6 × 2 #>   Gene     numberOfBarcode #>   <chr>              <int> #> 1 Gene_102               8 #> 2 Gene_115               7 #> 3 Gene_117               7 #> 4 Gene_124               7 #> 5 Gene_129               7 #> 6 Gene_13                7  # For the mean result <- find_zscore_hit(table, number_barcode = 6, metric = \"mean\") #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the ScreenR package. #>   Please report the issue at <https://github.com/EmanuelSoda/ScreenR/issues>. head(result) #> # A tibble: 6 × 2 #>   Gene     numberOfBarcode #>   <chr>              <int> #> 1 Gene_102               8 #> 2 Gene_102               8 #> 3 Gene_102               8 #> 4 Gene_102               8 #> 5 Gene_102               8 #> 6 Gene_102               8"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR annotation table — get_annotation_table","title":"Get ScreenR annotation table — get_annotation_table","text":"Get function annotation table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR annotation table — get_annotation_table","text":"","code":"get_annotation_table(object)  # S4 method for screenr_object get_annotation_table(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_annotation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR annotation table — get_annotation_table","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_annotation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR annotation table — get_annotation_table","text":"annotation table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_annotation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR annotation table — get_annotation_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) annotation_table <- get_annotation_table(object) #> ScreenR annotation table containing: #>  5320 rows #>  5 columns head(annotation_table) #> # A tibble: 6 × 5 #>   Gene     Barcode Gene_ID Sequence Library #>   <chr>    <fct>   <lgl>   <lgl>    <lgl>   #> 1 Gene_380 10208   NA      NA       NA      #> 2 Gene_380 10502   NA      NA       NA      #> 3 Gene_380 10796   NA      NA       NA      #> 4 Gene_380 11089   NA      NA       NA      #> 5 Gene_380 11382   NA      NA       NA      #> 6 Gene_380 11675   NA      NA       NA"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR count table — get_count_table","title":"Get ScreenR count table — get_count_table","text":"Get function count table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR count table — get_count_table","text":"","code":"get_count_table(object)  # S4 method for screenr_object get_count_table(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR count table — get_count_table","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR count table — get_count_table","text":"count table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Get ScreenR count table — get_count_table","text":"count_table used store count table perform analysis annotation_table used store annotation shRNA groups used store vector treated untreated replicates used store information replicates normalized_count_table used store normalized version count table data_table used store tidy format count table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_count_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR count table — get_count_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) count_table <- get_count_table(object) #> ScreenR count table containing: #>  5320 rows #>  15 columns head(count_table) #> # A tibble: 6 × 15 #>   Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>   <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #> 1 10208    3520  4283        2493        3998        3018    3393    3829 #> 2 10502     280   339         140         542         162     468     157 #> 3 10796    1507  1533        1120        1125        1286    1136    1095 #> 4 11089    3797  4151        2296        3857        3645    3677    3124 #> 5 11382     717   644         564         336         256     554     590 #> 6 11675    7330  7593        4927        6211        6504    7781    7183 #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> data(\"count_table\", package = \"ScreenR\") data(\"annotation_table\", package = \"ScreenR\")  groups <- factor(c(     \"T1/T2\", \"T1/T2\", \"Treated\", \"Treated\", \"Treated\",     \"Control\", \"Control\", \"Control\", \"Treated\", \"Treated\",     \"Treated\", \"Control\", \"Control\", \"Control\" ))  obj <- create_screenr_object(     table = count_table,     annotation = annotation_table,     groups = groups,     replicates = c(\"\") )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_data_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR data_table — get_data_table","title":"Get ScreenR data_table — get_data_table","text":"Get function data_table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_data_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR data_table — get_data_table","text":"","code":"get_data_table(object)  # S4 method for screenr_object get_data_table(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_data_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR data_table — get_data_table","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_data_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR data_table — get_data_table","text":"data_table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_data_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR data_table — get_data_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) data_table <- get_data_table(object) #> ScreenR normalized data table containing: #>  74480 rows #>  9 columns data_table #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR groups — get_groups","title":"Get ScreenR groups — get_groups","text":"Get function groups ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR groups — get_groups","text":"","code":"get_groups(object)  # S4 method for screenr_object get_groups(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR groups — get_groups","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR groups — get_groups","text":"groups ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR groups — get_groups","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) groups <- get_groups(object) groups #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_normalized_count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR normalized_count_table — get_normalized_count_table","title":"Get ScreenR normalized_count_table — get_normalized_count_table","text":"Get function normalized_count_table              ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_normalized_count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR normalized_count_table — get_normalized_count_table","text":"","code":"get_normalized_count_table(object)  # S4 method for screenr_object get_normalized_count_table(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_normalized_count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR normalized_count_table — get_normalized_count_table","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_normalized_count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR normalized_count_table — get_normalized_count_table","text":"normalized_count_table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_normalized_count_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR normalized_count_table — get_normalized_count_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) normalized_count_table <- get_normalized_count_table(object) #> ScreenR normalized count table containing: #>  5320 rows #>  15 columns normalized_count_table #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_replicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ScreenR replicates — get_replicates","title":"Get ScreenR replicates — get_replicates","text":"Get function replicates ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_replicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ScreenR replicates — get_replicates","text":"","code":"get_replicates(object)  # S4 method for screenr_object get_replicates(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_replicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ScreenR replicates — get_replicates","text":"object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_replicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ScreenR replicates — get_replicates","text":"replicates ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/get_replicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ScreenR replicates — get_replicates","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) replicates <- get_replicates(object) replicates #> [1] \"\""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/mapped_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapped Reads — mapped_reads","title":"Mapped Reads — mapped_reads","text":"function returns number mapped reads inside              ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/mapped_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapped Reads — mapped_reads","text":"","code":"mapped_reads(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/mapped_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapped Reads — mapped_reads","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/mapped_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mapped Reads — mapped_reads","text":"Return tibble containing number mapped read sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/mapped_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mapped Reads — mapped_reads","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) mapped_reads(object) #> # A tibble: 14 × 2 #>    Sample        Mapped #>    <fct>          <int> #>  1 T1          10671757 #>  2 T2           9799724 #>  3 Time3_TRT_A  6824877 #>  4 Time3_TRT_B  9107354 #>  5 Time3_TRT_C  9717868 #>  6 Time3_A      9485195 #>  7 Time3_B      9016812 #>  8 Time3_C      9568624 #>  9 Time4_TRT_A  8933915 #> 10 Time4_TRT_B  9883209 #> 11 Time4_TRT_C 12325124 #> 12 Time4_A     10351136 #> 13 Time4_B      9180192 #> 14 Time4_c      9315365"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/normalize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize data — normalize_data","title":"Normalize data — normalize_data","text":"function perform normalization data considering              fact shRNA defined length              influence data. Basically computed sum              row multiply 1e6. end data obtained              Count Per Million.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/normalize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize data — normalize_data","text":"","code":"normalize_data(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/normalize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize data — normalize_data","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/normalize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize data — normalize_data","text":"Return ScreenR object normalize data","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/normalize_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize data — normalize_data","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) object <- normalize_data(object)  slot(object, \"normalized_count_table\") #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot barcode hit — plot_barcode_hit","title":"Plot barcode hit — plot_barcode_hit","text":"Create barcode plot hit.              barcode plot displays hit differentially              regulated. vertical line left              side gene associated barcodes regulated              otherwise regulated.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot barcode hit — plot_barcode_hit","text":"","code":"plot_barcode_hit(   screenR_Object,   matrix_model,   contrast,   number_barcode = 3,   gene,   quantile = c(-0.5, 0.5),   labels = c(\"Negative logFC\", \"Positive logFC\") )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot barcode hit — plot_barcode_hit","text":"screenR_Object ScreenR object obtained using create_screenr_object matrix_model matrix used perform linear model analysis. created using model.matrix. contrast object created makeContrasts function. number_barcode Number barcode differentially expressed (DE) order consider associated gene DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE. gene name gene plot quantile Quantile display plot labels label displayed quantile side","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot barcode hit — plot_barcode_hit","text":"barcode plot","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot barcode hit — plot_barcode_hit","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) matrix_model <- model.matrix(~ slot(object, \"groups\")) colnames(matrix_model) <- c(\"Control\", \"T1_T2\", \"Treated\") contrast <- limma::makeContrasts(Treated - Control, levels = matrix_model)  plot_barcode_hit(object, matrix_model,     contrast = contrast,     gene = \"Gene_300\" ) #> Using classic mode.  #> NULL"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot number of barcode lost — plot_barcode_lost","title":"Plot number of barcode lost — plot_barcode_lost","text":"function plots number barcode lost sample.              Usually lots barcodes lost mean sample low              quality.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot number of barcode lost — plot_barcode_lost","text":"","code":"plot_barcode_lost(   screenR_Object,   palette = NULL,   alpha = 1,   legende_position = \"none\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot number of barcode lost — plot_barcode_lost","text":"screenR_Object ScreenR object obtained using create_screenr_object palette vector colors used fill barplot. alpha value opacity plot. Allowed values range 0 1 legende_position positioning legend plot. Allowed values \"top\", \"bottom\", \"right\", \"left\", \"none\".","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot number of barcode lost — plot_barcode_lost","text":"Returns plot displaying number barcode lost         sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot number of barcode lost — plot_barcode_lost","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_barcode_lost(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost_for_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","title":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","text":"function plots number barcodes lost sample              gene. Usually genetic screening gene              associated multiple shRNAs barcodes.              reason reasonable number barcodes associated              gene retrieved order robust result.              Visualizing number genes lost lot's barcode              Quality Check procedure order aware number              barcode hit identified.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost_for_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","text":"","code":"plot_barcode_lost_for_gene(screenR_Object, facet = TRUE, samples)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost_for_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","text":"screenR_Object ScreenR object obtained using create_screenr_object facet boolean use facet. samples vector samples visualize","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost_for_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","text":"Return plot displaying number barcode lost gene         sample.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_lost_for_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot number of barcode lost for  gene — plot_barcode_lost_for_gene","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_barcode_lost_for_gene(object,     samples = c(\"Time3_A\", \"Time3_B\") )  plot_barcode_lost_for_gene(object,     samples = c(\"Time3_A\", \"Time3_B\"),     facet = FALSE )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the trend over time of the barcodes — plot_barcode_trend","title":"Plot the trend over time of the barcodes — plot_barcode_trend","text":"Plot log2FC time barcodes different              time point. plot useful check efficacy              shRNA. Good shRNAs consistent trend trend time.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the trend over time of the barcodes — plot_barcode_trend","text":"","code":"plot_barcode_trend(   list_data_measure,   genes,   n_col = 1,   size_line = 1,   color = NULL )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the trend over time of the barcodes — plot_barcode_trend","text":"list_data_measure list containing measure table different time point. Generated using compute_metrics function. genes vector genes name. n_col number column use facet wrap. size_line thickness line. color vector colors. One color barcode.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the trend over time of the barcodes — plot_barcode_trend","text":"trend plot genes input.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_barcode_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the trend over time of the barcodes — plot_barcode_trend","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  metrics <- dplyr::bind_rows(     compute_metrics(object,         control = \"TRT\", treatment = \"Time3\",         day = \"Time3\"     ),     compute_metrics(object,         control = \"TRT\", treatment = \"Time4\",         day = \"Time4\"     ) ) # Multiple Genes plot_barcode_trend(metrics,     genes = c(\"Gene_1\", \"Gene_50\"),     n_col = 2 )  # Single Gene plot_barcode_trend(metrics, genes = \"Gene_300\") #> $Gene_300  #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Barcodes Hit — plot_boxplot","title":"Plot Barcodes Hit — plot_boxplot","text":"function plots boxplot sample genes              passed input. can used see overall trend              gene visualize gene regulated.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Barcodes Hit — plot_boxplot","text":"","code":"plot_boxplot(   screenR_Object,   genes,   group_var,   alpha = 0.5,   nrow = 1,   ncol = 1,   fill_var = \"Sample\",   type = \"boxplot\",   scales = \"free\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Barcodes Hit — plot_boxplot","text":"screenR_Object ScreenR object obtained using create_screenr_object genes vector genes displayed group_var variable used filter data, example different treatment alpha value opacity plot. Allowed values range 0 1 nrow number rows case multiple genes plotted ncol number columns case multiple genes plotted fill_var variable used fill boxplot type type plot use \"boxplot\" \"violinplot\" scales scales used facet. Possible values can \"free\", \"fixed\" \"free_y\"","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Barcodes Hit — plot_boxplot","text":"boxplot","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Barcodes Hit — plot_boxplot","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_boxplot(object,     genes = c(\"Gene_34\"),     group_var = c(\"T1\", \"T2\", \"TRT\"), nrow = 1, ncol = 2,     fill_var = \"Day\", type = \"violinplot\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_common_hit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot common hit — plot_common_hit","title":"Plot common hit — plot_common_hit","text":"method plot hits common among three methods              wrapper ggvenn function.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_common_hit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot common hit — plot_common_hit","text":"","code":"plot_common_hit(   hit_zscore,   hit_camera,   hit_roast,   alpha = 0.5,   stroke_size = 0.5,   set_name_size = 4,   text_color = \"black\",   text_size = 4,   show_percentage = TRUE,   title = \"\",   color = c(\"#1B9E77\", \"#D95F02\", \"#7570B3\"),   show_elements = TRUE )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_common_hit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot common hit — plot_common_hit","text":"hit_zscore list hits find_zscore_hit hit_camera list hits find_camera_hit hit_roast list hits find_roast_hit alpha value opacity plot. Allowed values range 0 1 stroke_size Stroke size drawing circles set_name_size Text size set names text_color Text color intersect contents text_size Text size intersect contents show_percentage Show percentage set title title display plot color three vector color venn show_elements Show set elements instead count/percentage.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_common_hit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot common hit — plot_common_hit","text":"vector containing common hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_common_hit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot common hit — plot_common_hit","text":"","code":"hit_zscore <- data.frame(Gene = c(\"A\", \"B\", \"C\", \"D\", \"E\")) hit_camera <- data.frame(Gene = c(\"A\", \"B\", \"C\", \"F\", \"H\", \"G\")) hit_roast <- data.frame(Gene = c(\"A\", \"L\", \"N\")) plot_common_hit(hit_zscore, hit_camera, hit_roast)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_explained_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the explained variance by the PC — plot_explained_variance","title":"Plot the explained variance by the PC — plot_explained_variance","text":"function plot explained variance              Principal Component analysis.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_explained_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the explained variance by the PC — plot_explained_variance","text":"","code":"plot_explained_variance(   screenR_Object,   cumulative = FALSE,   color = \"steelblue\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_explained_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the explained variance by the PC — plot_explained_variance","text":"screenR_Object ScreenR object obtained using create_screenr_object cumulative boolean value indicates whether plot cumulative variance. default value FALSE. color color fill barplot default value steelblue","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_explained_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the explained variance by the PC — plot_explained_variance","text":"explained variance plot","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_explained_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the explained variance by the PC — plot_explained_variance","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_explained_variance(object)   # For the cumulative plot plot_explained_variance(object, cumulative = TRUE)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mapped reads — plot_mapped_reads","title":"Plot mapped reads — plot_mapped_reads","text":"function plots number reads mapped              sample. internally call count_mapped_reads              function, compute number mapped reads.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mapped reads — plot_mapped_reads","text":"","code":"plot_mapped_reads(   screenR_Object,   palette = NULL,   alpha = 1,   legende_position = \"none\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mapped reads — plot_mapped_reads","text":"screenR_Object ScreenR object obtained using create_screenr_object palette vector color used fill barplot. alpha value opacity plot. Allowed values range 0 1 legende_position positioning legend plot (\"none\", \"left\", \"right\", \"bottom\", \"top\")","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mapped reads — plot_mapped_reads","text":"return ggplot object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot mapped reads — plot_mapped_reads","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_mapped_reads(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","title":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","text":"function creates boxplot densityplot show              distribution mapped reads different samples.              function can used assess quality samples.              Samples show roughly distribution              good quality.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","text":"","code":"plot_mapped_reads_distribution(   screenR_Object,   palette = NULL,   alpha = 1,   type = \"boxplot\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","text":"screenR_Object ScreenR object obtained using create_screenr_object. palette color vector used plot. alpha value opacity plot. Allowed values range 0 1 type type plot. default \"boxplot\" option \"density.\"","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","text":"Return tibble containing number mapped read sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mapped_reads_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the distribution of the mapped reads — plot_mapped_reads_distribution","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  # Boxplot plot_mapped_reads_distribution(object)   # Density plot_mapped_reads_distribution(object, type = \"density\")   plot_mapped_reads_distribution(object, type = \"density\", alpha = 0.2)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Multidimensional Scaling Plot — plot_mds","title":"Multidimensional Scaling Plot — plot_mds","text":"Plot samples two-dimensional scatterplot              distances plot approximate typical log2 fold              changes samples.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multidimensional Scaling Plot — plot_mds","text":"","code":"plot_mds(   screenR_Object,   groups = NULL,   alpha = 0.8,   size = 2.5,   color = \"black\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multidimensional Scaling Plot — plot_mds","text":"screenR_Object Object package create_screenr_object groups vector used fill plot NULL function use default groups slot object passed input. alpha opacity labels. Possible value range 0 1. size dimension labels. default value 2.5 color color labels. default value black","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multidimensional Scaling Plot — plot_mds","text":"MDS Plot","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multidimensional Scaling Plot — plot_mds","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_mds(object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the trend hit gene — plot_trend","title":"Plot the trend hit gene — plot_trend","text":"function plot trend gene resulted hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the trend hit gene — plot_trend","text":"","code":"plot_trend(   screenR_Object,   genes,   group_var,   alpha = 0.5,   se = FALSE,   point_size = 1,   line_size = 1,   nrow = 1,   ncol = 1,   scales = \"free\" )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the trend hit gene — plot_trend","text":"screenR_Object ScreenR object obtained using create_screenr_object genes vector genes use group_var variable used filter data, example different treatment alpha value opacity plot. Allowed values range 0 1 se boolean indicate plot standard error point_size dimension dot line_size dimension line nrow number rows case multiple genes plotted ncol number columns case multiple genes plotted scales scales used facette","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the trend hit gene — plot_trend","text":"plot trend time specific treatment.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the trend hit gene — plot_trend","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  plot_trend(object, genes = \"Gene_42\", group_var = c(\"T1\", \"T2\", \"TRT\"))   plot_trend(object,     genes = c(\"Gene_42\", \"Gene_100\"),     group_var = c(\"T1\", \"T2\", \"TRT\"),     nrow = 2 )"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_zscore_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution Z-score — plot_zscore_distribution","title":"Plot distribution Z-score — plot_zscore_distribution","text":"function plots Log2FC Z-score distribution              treated vs control different time points.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_zscore_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution Z-score — plot_zscore_distribution","text":"","code":"plot_zscore_distribution(time_point_measure, alpha = 1)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_zscore_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution Z-score — plot_zscore_distribution","text":"time_point_measure list containing table time point. table contains barcode counts treated control Log2FC, Zscore, ZscoreRobust, Day. alpha value opacity plot. Allowed values range 0 1","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_zscore_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution Z-score — plot_zscore_distribution","text":"return density plot distribution Z-score","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/plot_zscore_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution Z-score — plot_zscore_distribution","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\"))  table1 <- compute_metrics(object,     control = \"TRT\", treatment = \"Time3\",     day = \"Time3\" )  table2 <- compute_metrics(object,     control = \"TRT\", treatment = \"Time4\",     day = \"Time4\" )  plot_zscore_distribution(list(table1, table2), alpha = 0.5)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/remove_all_zero_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rows that have zero count in all samples — remove_all_zero_row","title":"Remove rows that have zero count in all samples — remove_all_zero_row","text":"function removes rows zero count              samples. takes care updating count_table              annotation_table.              Very_Important: performed                              data normalization.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/remove_all_zero_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rows that have zero count in all samples — remove_all_zero_row","text":"","code":"remove_all_zero_row(screenR_Object)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/remove_all_zero_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rows that have zero count in all samples — remove_all_zero_row","text":"screenR_Object ScreenR object obtained using create_screenr_object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/remove_all_zero_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rows that have zero count in all samples — remove_all_zero_row","text":"ScreenR object count_table annotation_table         filtered.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/remove_all_zero_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rows that have zero count in all samples — remove_all_zero_row","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) counts <- get_count_table(object) #> ScreenR count table containing: #>  5320 rows #>  15 columns nrow(counts) #> [1] 5320 object <- remove_all_zero_row(object) counts <- get_count_table(object) #> ScreenR count table containing: #>  5317 rows #>  15 columns nrow(counts) #> [1] 5317"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/select_number_barcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Select  number of Barcode — select_number_barcode","title":"Select  number of Barcode — select_number_barcode","text":"Compute unique gene symbol gene","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/select_number_barcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select  number of Barcode — select_number_barcode","text":"","code":"select_number_barcode(gene, gene_symbols, number_barcode)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/select_number_barcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select  number of Barcode — select_number_barcode","text":"gene gene name ... Arguments passed unique_gene_symbols gene_symbols gene symbols list","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/select_number_barcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select  number of Barcode — select_number_barcode","text":"barcode gene passed input","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR annotation table — set_annotation_table","title":"Set ScreenR annotation table — set_annotation_table","text":"Set function annotation table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR annotation table — set_annotation_table","text":"","code":"set_annotation_table(object, annotation_table)  # S4 method for screenr_object set_annotation_table(object, annotation_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_annotation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR annotation table — set_annotation_table","text":"object ScreenR object obtained using create_screenr_object annotation_table table containing annotation shRNA","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_annotation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR annotation table — set_annotation_table","text":"ScreenR object annotation table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_annotation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR annotation table — set_annotation_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) annotation <- get_annotation_table(object) #> ScreenR annotation table containing: #>  5320 rows #>  5 columns set_annotation_table(object, annotation) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR count table — set_count_table","title":"Set ScreenR count table — set_count_table","text":"Set function count table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR count table — set_count_table","text":"","code":"set_count_table(object, count_table)  # S4 method for screenr_object set_count_table(object, count_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR count table — set_count_table","text":"object ScreenR object obtained using create_screenr_object count_table count table containing row shRNA column sample","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR count table — set_count_table","text":"ScreenR object count table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_count_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR count table — set_count_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) counts <- get_count_table(object) #> ScreenR count table containing: #>  5320 rows #>  15 columns set_count_table(object, counts) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_data_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR data_table — set_data_table","title":"Set ScreenR data_table — set_data_table","text":"Set function data_table ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_data_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR data_table — set_data_table","text":"","code":"set_data_table(object, data_table)  # S4 method for screenr_object set_data_table(object, data_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_data_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR data_table — set_data_table","text":"object ScreenR object obtained using create_screenr_object data_table count table tidy format","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_data_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR data_table — set_data_table","text":"ScreenR object set data_table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_data_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR data_table — set_data_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) data_table <- get_data_table(object) #> ScreenR normalized data table containing: #>  74480 rows #>  9 columns set_data_table(object, data_table) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR groups — set_groups","title":"Set ScreenR groups — set_groups","text":"Set function groups ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR groups — set_groups","text":"","code":"set_groups(object, groups)  # S4 method for screenr_object set_groups(object, groups)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR groups — set_groups","text":"object ScreenR object obtained using create_screenr_object groups treatment control groups","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR groups — set_groups","text":"ScreenR object containing group field","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR groups — set_groups","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) groups <- get_groups(object) set_groups(object, groups) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_normalized_count_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR normalized_count_table — set_normalized_count_table","title":"Set ScreenR normalized_count_table — set_normalized_count_table","text":"Set function normalized_count_table              ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_normalized_count_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR normalized_count_table — set_normalized_count_table","text":"","code":"set_normalized_count_table(object, normalized_count_table)  # S4 method for screenr_object set_normalized_count_table(object, normalized_count_table)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_normalized_count_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR normalized_count_table — set_normalized_count_table","text":"object ScreenR object obtained using create_screenr_object normalized_count_table table normalized count table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_normalized_count_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR normalized_count_table — set_normalized_count_table","text":"ScreenR object set normalized_count_table","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_normalized_count_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR normalized_count_table — set_normalized_count_table","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) normalized_count_table <- get_normalized_count_table(object) #> ScreenR normalized count table containing: #>  5320 rows #>  15 columns normalized_count_table #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> set_normalized_count_table(object, normalized_count_table) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_replicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ScreenR replicates — set_replicates","title":"Set ScreenR replicates — set_replicates","text":"Set function replicates ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_replicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ScreenR replicates — set_replicates","text":"","code":"set_replicates(object, replicates)  # S4 method for screenr_object set_replicates(object, replicates)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_replicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ScreenR replicates — set_replicates","text":"object ScreenR object obtained using create_screenr_object replicates vector containing replicates name","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_replicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ScreenR replicates — set_replicates","text":"ScreenR object specific replicates","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/set_replicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ScreenR replicates — set_replicates","text":"","code":"object <- get0(\"object\", envir = asNamespace(\"ScreenR\")) replicates <- get_replicates(object) set_replicates(object, replicates) #> An object of class \"screenr_object\" #> Slot \"count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <int> <int>       <int>       <int>       <int>   <int>   <int> #>  1 10208    3520  4283        2493        3998        3018    3393    3829 #>  2 10502     280   339         140         542         162     468     157 #>  3 10796    1507  1533        1120        1125        1286    1136    1095 #>  4 11089    3797  4151        2296        3857        3645    3677    3124 #>  5 11382     717   644         564         336         256     554     590 #>  6 11675    7330  7593        4927        6211        6504    7781    7183 #>  7 11969    4854  5371        4251        4921        5424    4627    3952 #>  8 12263    1539  1171         764        1258         923    1503    1150 #>  9 12555    4328  4051        3130        4720        4697    3870    3835 #> 10 12847     466   417         206         318         288     328     185 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <int>, Time4_TRT_A <int>, Time4_TRT_B <int>, #> #   Time4_TRT_C <int>, Time4_A <int>, Time4_B <int>, Time4_c <int> #>  #> Slot \"annotation_table\": #> # A tibble: 5,320 × 5 #>    Gene     Barcode Gene_ID Sequence Library #>    <chr>    <fct>   <lgl>   <lgl>    <lgl>   #>  1 Gene_380 10208   NA      NA       NA      #>  2 Gene_380 10502   NA      NA       NA      #>  3 Gene_380 10796   NA      NA       NA      #>  4 Gene_380 11089   NA      NA       NA      #>  5 Gene_380 11382   NA      NA       NA      #>  6 Gene_380 11675   NA      NA       NA      #>  7 Gene_380 11969   NA      NA       NA      #>  8 Gene_380 12263   NA      NA       NA      #>  9 Gene_380 12555   NA      NA       NA      #> 10 Gene_380 12847   NA      NA       NA      #> # ℹ 5,310 more rows #>  #> Slot \"groups\": #>  [1] T1/T2   T1/T2   Treated Treated Treated Control Control Control Treated #> [10] Treated Treated Control Control Control #> Levels: Control T1/T2 Treated #>  #> Slot \"replicates\": #> [1] \"\" #>  #> Slot \"normalized_count_table\": #> # A tibble: 5,320 × 15 #>    Barcode    T1    T2 Time3_TRT_A Time3_TRT_B Time3_TRT_C Time3_A Time3_B #>    <fct>   <dbl> <dbl>       <dbl>       <dbl>       <dbl>   <dbl>   <dbl> #>  1 10208   330.  437.        365.        439.        311.    358.    425.  #>  2 10502    26.2  34.6        20.5        59.5        16.7    49.3    17.4 #>  3 10796   141.  156.        164.        124.        132.    120.    121.  #>  4 11089   356.  424.        336.        424.        375.    388.    346.  #>  5 11382    67.2  65.7        82.6        36.9        26.3    58.4    65.4 #>  6 11675   687.  775.        722.        682.        669.    820.    797.  #>  7 11969   455.  548.        623.        540.        558.    488.    438.  #>  8 12263   144.  119.        112.        138.         95.0   158.    128.  #>  9 12555   406.  413.        459.        518.        483.    408.    425.  #> 10 12847    43.7  42.6        30.2        34.9        29.6    34.6    20.5 #> # ℹ 5,310 more rows #> # ℹ 7 more variables: Time3_C <dbl>, Time4_TRT_A <dbl>, Time4_TRT_B <dbl>, #> #   Time4_TRT_C <dbl>, Time4_A <dbl>, Time4_B <dbl>, Time4_c <dbl> #>  #> Slot \"data_table\": #> # A tibble: 74,480 × 9 #>    Barcode Gene     Sample    Frequency Sequence Library Gene_ID Day   Treatment #>    <fct>   <chr>    <fct>         <dbl> <lgl>    <lgl>   <lgl>   <chr> <chr>     #>  1 10208   Gene_380 T1             330. NA       NA      NA      T1    T1        #>  2 10208   Gene_380 T2             437. NA       NA      NA      T2    T2        #>  3 10208   Gene_380 Time3_TR…      365. NA       NA      NA      Time3 TRT       #>  4 10208   Gene_380 Time3_TR…      439. NA       NA      NA      Time3 TRT       #>  5 10208   Gene_380 Time3_TR…      311. NA       NA      NA      Time3 TRT       #>  6 10208   Gene_380 Time3_A        358. NA       NA      NA      Time3 Time3     #>  7 10208   Gene_380 Time3_B        425. NA       NA      NA      Time3 Time3     #>  8 10208   Gene_380 Time3_C        363. NA       NA      NA      Time3 Time3     #>  9 10208   Gene_380 Time4_TR…      323. NA       NA      NA      Time4 TRT       #> 10 10208   Gene_380 Time4_TR…      382. NA       NA      NA      Time4 TRT       #> # ℹ 74,470 more rows #>"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/unique_gene_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique gene Symbols — unique_gene_symbols","title":"Unique gene Symbols — unique_gene_symbols","text":"Compute unique gene symbol gene","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/unique_gene_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique gene Symbols — unique_gene_symbols","text":"","code":"unique_gene_symbols(gene_symbols, number_barcode = 3)"},{"path":"https://emanuelsoda.github.io/ScreenR/reference/unique_gene_symbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique gene Symbols — unique_gene_symbols","text":"gene_symbols gene symbols list ... Arguments passed find_camera_hit number_barcode Number barcode differentially expressed (DE)order consider gene associated DE. Example gene associated 10 shRNA consider gene DE least number_barcode = 5 shRNA DE.","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/reference/unique_gene_symbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique gene Symbols — unique_gene_symbols","text":"list unique gene symbols","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-09953","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.53","title":"ScreenR 0.99.53","text":"Changes version 0.99.53: Update documentation example dataset requested reviewer Pushed Bioconductor Changes version 0.99.52: Pushed Bioconductor Changes version 0.99.51: Pushed Bioconductor Changes version 0.99.5: Now ScreenR uses R 4.2 Lazy data set FALSE DESCRIPTION now present BugReport link Now function imported using importFrom vignette now BiocStyle chunks code vignette set show warnings Implemented set get function ScreenR object","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-09941","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.41","title":"ScreenR 0.99.41","text":"Update Bioconductor","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-0994","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.4","title":"ScreenR 0.99.4","text":"Changed dataframe example","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-0993","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.3","title":"ScreenR 0.99.3","text":"Fixed bug Changed find_common_hit","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-0992","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.2","title":"ScreenR 0.99.2","text":"Fixed bug","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-0991","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.1","title":"ScreenR 0.99.1","text":"Fixed bug","code":""},{"path":"https://emanuelsoda.github.io/ScreenR/news/index.html","id":"screenr-0990","dir":"Changelog","previous_headings":"","what":"ScreenR 0.99.0","title":"ScreenR 0.99.0","text":"Submitted Bioconductor","code":""}]
